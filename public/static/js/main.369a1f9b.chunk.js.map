{"version":3,"sources":["components/ControllerChat/ControllerChat.jsx","components/EntryToChat/EntryToChat.jsx","components/ListMessages/ListMessages.jsx","components/Container/Container.jsx","App.js","index.js"],"names":["ControllerChat","onSendMessage","onAddText","value","onSubmit","e","preventDefault","InputGroup","className","Form","Control","autoComplete","type","name","onChange","target","Button","variant","EntryToChat","connect","onAddUser","Row","Col","xs","placeholder","required","ListMessages","massages","elementRef","useRef","useEffect","current","scrollIntoView","behavior","map","item","messageClassName","user","nameChat","event","id","message","ref","Container","children","HOST","window","location","origin","replace","App","useState","setMessages","setName","text","setText","conected","setConected","socket","showEntry","WebSocket","onopen","uuidv4","send","JSON","stringify","console","log","onmessage","parse","data","prevState","onclose","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.369a1f9b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport const ControllerChat = ({ onSendMessage, onAddText, value }) => {\n  const handleSendMessage = (e) => {\n    e.preventDefault();\n    if (value === \"\") return;\n    onSendMessage();\n    onAddText(\"\");\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSendMessage}>\n        <InputGroup className=\"mt-2\">\n          <Form.Control\n            autoComplete=\"off\"\n            type=\"text\"\n            name=\"text\"\n            value={value}\n            onChange={(e) => onAddText(e.target.value)}\n          />\n          <Button type=\"submit\" variant=\"success\">\n            Отправить\n          </Button>\n        </InputGroup>\n      </form>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport const EntryToChat = ({ connect, onAddUser, value }) => {\n  const handleAddName = (e) => {\n    e.preventDefault();\n    connect();\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleAddName}>\n        <Row>\n          <Col xs={9}>\n            <Form.Control\n              autoComplete=\"off\"\n              type=\"text\"\n              placeholder=\"введите имя\"\n              value={value}\n              onChange={(e) => onAddUser(e.target.value)}\n              required\n            />\n          </Col>\n          <Col xs={3}>\n            <Button type=\"submit\">Войти</Button>\n          </Col>\n        </Row>\n      </form>\n    </div>\n  );\n};\n","import React, { useRef, useEffect } from \"react\";\n\nimport \"./ListMessages.scss\";\n\nexport const ListMessages = ({ massages, name }) => {\n  const elementRef = useRef();\n\n  useEffect(() => {\n    elementRef.current.scrollIntoView({ behavior: \"smooth\" });\n  });\n\n  return (\n    <div className=\"windows-massages\">\n      {massages.map((item) => {\n        const messageClassName = item.user === name ? \"your\" : \"user\";\n        const nameChat = item.user === name ? \"Вы\" : item.user;\n\n        return item.event === \"connect\" ? (\n          <p\n            key={item.id}\n            className=\"windows-massages__message windows-massages__message--connect \"\n          >{`Подключился пользователь ${item.user}`}</p>\n        ) : (\n          <p\n            key={item.id}\n            className={`windows-massages__message windows-massages__message--${messageClassName}-message`}\n          >\n            {`${nameChat}: ${item.message}`}\n          </p>\n        );\n      })}\n      <div ref={elementRef}></div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Container.scss\";\n\nexport const Container = ({ children }) => {\n  return <div className=\"container\">{children}</div>;\n};\n","import { useState, useRef } from \"react\";\nimport \"./App.scss\";\n\nimport { ControllerChat } from \"./components/ControllerChat\";\nimport { EntryToChat } from \"./components/EntryToChat\";\nimport { ListMessages } from \"./components/ListMessages\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Container } from \"./components/Container\";\n\nconst HOST = window.location.origin.replace(/^http/, \"ws\");\n\nconst App = () => {\n  const [massages, setMessages] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [conected, setConected] = useState(false);\n  const socket = useRef();\n\n  const connection = () => {\n    // socket.current = new WebSocket(\"ws://localhost:5000/\");\n    socket.current = new WebSocket(HOST);\n    socket.current.onopen = () => {\n      const message = {\n        event: \"connect\",\n        user: name,\n        id: uuidv4(),\n      };\n      setConected(true);\n\n      socket.current.send(JSON.stringify(message));\n      console.log(\"Соеденение установлено!\");\n    };\n\n    socket.current.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      setMessages((prevState) => [...prevState, message]);\n    };\n    socket.current.onclose = (event) => {\n      console.log(\"Соеденение закрыто\");\n    };\n  };\n\n  const handleSendMessage = () => {\n    const message = {\n      event: \"message\",\n      user: name,\n      message: text,\n      id: uuidv4(),\n    };\n\n    socket.current.send(JSON.stringify(message));\n  };\n\n  const showEntry = name && conected;\n  return (\n    <section className=\"section-chat\">\n      <Container>\n        <h2\n          className={\n            conected\n              ? \"section-chat__caption section-chat__caption--hidden\"\n              : \"section-chat__caption\"\n          }\n        >\n          Добро пожаловать в чат\n        </h2>\n        {!showEntry && (\n          <EntryToChat connect={connection} onAddUser={setName} value={name} />\n        )}\n        {conected && <ListMessages massages={massages} name={name} />}\n\n        {conected && (\n          <ControllerChat\n            onAddText={setText}\n            onSendMessage={handleSendMessage}\n            value={text}\n          />\n        )}\n      </Container>\n    </section>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}